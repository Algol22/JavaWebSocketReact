{"ast":null,"code":"/**\n * @internal\n */\nexport function augmentWebsocket(webSocket, debug) {\n  webSocket.terminate = function () {\n    const noOp = () => {}; // set all callbacks to no op\n\n\n    this.onerror = noOp;\n    this.onmessage = noOp;\n    this.onopen = noOp;\n    const ts = new Date();\n    const id = Math.random().toString().substring(2, 8); // A simulated id\n\n    const origOnClose = this.onclose; // Track delay in actual closure of the socket\n\n    this.onclose = closeEvent => {\n      const delay = new Date().getTime() - ts.getTime();\n      debug(`Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`);\n    };\n\n    this.close();\n    origOnClose?.call(webSocket, {\n      code: 4001,\n      reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n      wasClean: false\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\usher\\Desktop\\chat\\ChatApplication\\react-client\\node_modules\\@stomp\\stompjs\\src\\augment-websocket.ts"],"names":[],"mappings":"AAEA;;AAEG;AACH,OAAM,SAAU,gBAAV,CACJ,SADI,EAEJ,KAFI,EAEwB;AAE5B,EAAA,SAAS,CAAC,SAAV,GAAsB,YAAA;AACpB,UAAM,IAAI,GAAG,MAAK,CAAG,CAArB,CADoB,CAGpB;;;AACA,SAAK,OAAL,GAAe,IAAf;AACA,SAAK,SAAL,GAAiB,IAAjB;AACA,SAAK,MAAL,GAAc,IAAd;AAEA,UAAM,EAAE,GAAG,IAAI,IAAJ,EAAX;AACA,UAAM,EAAE,GAAG,IAAI,CAAC,MAAL,GAAc,QAAd,GAAyB,SAAzB,CAAmC,CAAnC,EAAsC,CAAtC,CAAX,CAToB,CASiC;;AAErD,UAAM,WAAW,GAAG,KAAK,OAAzB,CAXoB,CAapB;;AACA,SAAK,OAAL,GAAe,UAAU,IAAG;AAC1B,YAAM,KAAK,GAAG,IAAI,IAAJ,GAAW,OAAX,KAAuB,EAAE,CAAC,OAAH,EAArC;AACA,MAAA,KAAK,CACH,sBAAsB,EAAE,mBAAmB,KAAK,yBAAyB,UAAU,CAAC,IAAI,IAAI,UAAU,CAAC,MAAM,EAD1G,CAAL;AAGD,KALD;;AAOA,SAAK,KAAL;AAEA,IAAA,WAAW,EAAE,IAAb,CAAkB,SAAlB,EAA6B;AAC3B,MAAA,IAAI,EAAE,IADqB;AAE3B,MAAA,MAAM,EAAE,6BAA6B,EAAE,8CAFZ;AAG3B,MAAA,QAAQ,EAAE;AAHiB,KAA7B;AAKD,GA5BD;AA6BD","sourcesContent":["import { IStompSocket } from './types.js';\n\n/**\n * @internal\n */\nexport function augmentWebsocket(\n  webSocket: IStompSocket,\n  debug: (msg: string) => void\n) {\n  webSocket.terminate = function () {\n    const noOp = () => {};\n\n    // set all callbacks to no op\n    this.onerror = noOp;\n    this.onmessage = noOp;\n    this.onopen = noOp;\n\n    const ts = new Date();\n    const id = Math.random().toString().substring(2, 8); // A simulated id\n\n    const origOnClose = this.onclose;\n\n    // Track delay in actual closure of the socket\n    this.onclose = closeEvent => {\n      const delay = new Date().getTime() - ts.getTime();\n      debug(\n        `Discarded socket (#${id})  closed after ${delay}ms, with code/reason: ${closeEvent.code}/${closeEvent.reason}`\n      );\n    };\n\n    this.close();\n\n    origOnClose?.call(webSocket, {\n      code: 4001,\n      reason: `Quick discarding socket (#${id}) without waiting for the shutdown sequence.`,\n      wasClean: false,\n    });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}